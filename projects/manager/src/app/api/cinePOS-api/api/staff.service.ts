/**
 * CinePOS_BackEnd
 * CinePOS 後端API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CommonResFailedFieldInvalid } from '../model/commonResFailedFieldInvalid';
import { CommonResFailedNoFound } from '../model/commonResFailedNoFound';
import { CommonResFailedWrongPassword } from '../model/commonResFailedWrongPassword';
import { InfoUpdateReq } from '../model/infoUpdateReq';
import { InfoUpdateRes } from '../model/infoUpdateRes';
import { LoginReq } from '../model/loginReq';
import { LoginRes } from '../model/loginRes';
import { UserPostStickerReFailed } from '../model/userPostStickerReFailed';
import { UserPostStickerRes } from '../model/userPostStickerRes';
import { UserProfileRes } from '../model/userProfileRes';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StaffService {

    protected basePath = 'https://api-t.cine-pos.com/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 登入請求
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffLoginPost(body: LoginReq, observe?: 'body', reportProgress?: boolean): Observable<LoginRes>;
    public v1StaffLoginPost(body: LoginReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LoginRes>>;
    public v1StaffLoginPost(body: LoginReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LoginRes>>;
    public v1StaffLoginPost(body: LoginReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffLoginPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<LoginRes>('post',`${this.basePath}/v1/staff/login`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 修改員工姓名
     * 
     * @param body 資料格式
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe?: 'body', reportProgress?: boolean): Observable<InfoUpdateRes>;
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InfoUpdateRes>>;
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InfoUpdateRes>>;
    public v1StaffUserProfilePost(body: InfoUpdateReq, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling v1StaffUserProfilePost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InfoUpdateRes>('post',`${this.basePath}/v1/staff/user/profile`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 取得櫃台人員資料
     * 
     * @param staffId 員編
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffUserProfileStaffIdGet(staffId: string, observe?: 'body', reportProgress?: boolean): Observable<UserProfileRes>;
    public v1StaffUserProfileStaffIdGet(staffId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserProfileRes>>;
    public v1StaffUserProfileStaffIdGet(staffId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserProfileRes>>;
    public v1StaffUserProfileStaffIdGet(staffId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (staffId === null || staffId === undefined) {
            throw new Error('Required parameter staffId was null or undefined when calling v1StaffUserProfileStaffIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<UserProfileRes>('get',`${this.basePath}/v1/staff/user/profile/${encodeURIComponent(String(staffId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 上傳櫃台人員大頭貼
     * 
     * @param image 
     * @param staffId 員編
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public v1StaffUserProfileStaffIdPostForm(image: Blob, staffId: string, observe?: 'body', reportProgress?: boolean): Observable<UserPostStickerRes>;
    public v1StaffUserProfileStaffIdPostForm(image: Blob, staffId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserPostStickerRes>>;
    public v1StaffUserProfileStaffIdPostForm(image: Blob, staffId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserPostStickerRes>>;
    public v1StaffUserProfileStaffIdPostForm(image: Blob, staffId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (image === null || image === undefined) {
            throw new Error('Required parameter image was null or undefined when calling v1StaffUserProfileStaffIdPost.');
        }

        if (staffId === null || staffId === undefined) {
            throw new Error('Required parameter staffId was null or undefined when calling v1StaffUserProfileStaffIdPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (image !== undefined) {
            formParams = formParams.append('image', <any>image) as any || formParams;
        }

        return this.httpClient.request<UserPostStickerRes>('post',`${this.basePath}/v1/staff/user/profile/${encodeURIComponent(String(staffId))}`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
